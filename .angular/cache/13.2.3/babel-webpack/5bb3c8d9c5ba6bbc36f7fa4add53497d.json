{"ast":null,"code":"import * as go from \"gojs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/diagram.service\";\nimport * as i2 from \"ngx-toastr\";\nimport * as i3 from \"@angular/router\";\nconst $ = go.GraphObject.make;\nlet DiagramComponent = /*#__PURE__*/(() => {\n  class DiagramComponent {\n    constructor(diagramServices, toast, router) {\n      this.diagramServices = diagramServices;\n      this.toast = toast;\n      this.router = router;\n      this.diagram = new go.Diagram();\n      this.palette = new go.Palette();\n    }\n\n    onClick(e) {\n      this.sendData();\n    }\n\n    ngOnInit() {\n      this.iniciar();\n      this.getData(); //this.getDiagrams();\n    }\n\n    ngAfterViewInit() {}\n\n    iniciar() {\n      this.diagram = $(go.Diagram, \"diagramDiv\", {\n        grid: $(go.Panel, \"Grid\", $(go.Shape, \"LineH\", {\n          stroke: \"lightgray\",\n          strokeWidth: 0.5\n        }), $(go.Shape, \"LineH\", {\n          stroke: \"gray\",\n          strokeWidth: 0.5,\n          interval: 10\n        }), $(go.Shape, \"LineV\", {\n          stroke: \"lightgray\",\n          strokeWidth: 0.5\n        }), $(go.Shape, \"LineV\", {\n          stroke: \"gray\",\n          strokeWidth: 0.5,\n          interval: 10\n        })),\n        \"draggingTool.dragsLink\": true,\n        \"draggingTool.isGridSnapEnabled\": true,\n        \"linkingTool.isUnconnectedLinkValid\": true,\n        \"linkingTool.portGravity\": 20,\n        \"relinkingTool.isUnconnectedLinkValid\": true,\n        \"relinkingTool.portGravity\": 20,\n        \"relinkingTool.fromHandleArchetype\": $(go.Shape, \"Diamond\", {\n          segmentIndex: 0,\n          cursor: \"pointer\",\n          desiredSize: new go.Size(8, 8),\n          fill: \"tomato\",\n          stroke: \"darkred\"\n        }),\n        \"relinkingTool.toHandleArchetype\": $(go.Shape, \"Diamond\", {\n          segmentIndex: -1,\n          cursor: \"pointer\",\n          desiredSize: new go.Size(8, 8),\n          fill: \"darkred\",\n          stroke: \"tomato\"\n        }),\n        \"linkReshapingTool.handleArchetype\": $(go.Shape, \"Diamond\", {\n          desiredSize: new go.Size(7, 7),\n          fill: \"lightblue\",\n          stroke: \"deepskyblue\"\n        }),\n        \"rotatingTool.handleAngle\": 270,\n        \"rotatingTool.handleDistance\": 30,\n        \"rotatingTool.snapAngleMultiple\": 15,\n        \"rotatingTool.snapAngleEpsilon\": 15,\n        \"undoManager.isEnabled\": true\n      });\n      var nodeSelectionAdornmentTemplate = $(go.Adornment, \"Auto\", $(go.Shape, {\n        fill: null,\n        stroke: \"deepskyblue\",\n        strokeWidth: 1.5,\n        strokeDashArray: [4, 2]\n      }), $(go.Placeholder));\n      var nodeResizeAdornmentTemplate = $(go.Adornment, \"Spot\", {\n        locationSpot: go.Spot.Right\n      }, $(go.Placeholder), $(go.Shape, {\n        alignment: go.Spot.TopLeft,\n        cursor: \"nw-resize\",\n        desiredSize: new go.Size(6, 6),\n        fill: \"lightblue\",\n        stroke: \"deepskyblue\"\n      }), $(go.Shape, {\n        alignment: go.Spot.Top,\n        cursor: \"n-resize\",\n        desiredSize: new go.Size(6, 6),\n        fill: \"lightblue\",\n        stroke: \"deepskyblue\"\n      }), $(go.Shape, {\n        alignment: go.Spot.TopRight,\n        cursor: \"ne-resize\",\n        desiredSize: new go.Size(6, 6),\n        fill: \"lightblue\",\n        stroke: \"deepskyblue\"\n      }), $(go.Shape, {\n        alignment: go.Spot.Left,\n        cursor: \"w-resize\",\n        desiredSize: new go.Size(6, 6),\n        fill: \"lightblue\",\n        stroke: \"deepskyblue\"\n      }), $(go.Shape, {\n        alignment: go.Spot.Right,\n        cursor: \"e-resize\",\n        desiredSize: new go.Size(6, 6),\n        fill: \"lightblue\",\n        stroke: \"deepskyblue\"\n      }), $(go.Shape, {\n        alignment: go.Spot.BottomLeft,\n        cursor: \"se-resize\",\n        desiredSize: new go.Size(6, 6),\n        fill: \"lightblue\",\n        stroke: \"deepskyblue\"\n      }), $(go.Shape, {\n        alignment: go.Spot.Bottom,\n        cursor: \"s-resize\",\n        desiredSize: new go.Size(6, 6),\n        fill: \"lightblue\",\n        stroke: \"deepskyblue\"\n      }), $(go.Shape, {\n        alignment: go.Spot.BottomRight,\n        cursor: \"sw-resize\",\n        desiredSize: new go.Size(6, 6),\n        fill: \"lightblue\",\n        stroke: \"deepskyblue\"\n      }));\n      var nodeRotateAdornmentTemplate = $(go.Adornment, {\n        locationSpot: go.Spot.Center,\n        locationObjectName: \"ELLIPSE\"\n      }, $(go.Shape, \"Ellipse\", {\n        name: \"ELLIPSE\",\n        cursor: \"pointer\",\n        desiredSize: new go.Size(7, 7),\n        fill: \"lightblue\",\n        stroke: \"deepskyblue\"\n      }), $(go.Shape, {\n        geometryString: \"M3.5 7 L3.5 30\",\n        isGeometryPositioned: true,\n        stroke: \"deepskyblue\",\n        strokeWidth: 1.5,\n        strokeDashArray: [4, 2]\n      }));\n      this.diagram.nodeTemplate = $(go.Node, \"Spot\", {\n        locationSpot: go.Spot.Center\n      }, new go.Binding(\"location\", \"loc\", go.Point.parse).makeTwoWay(go.Point.stringify), {\n        selectable: true,\n        selectionAdornmentTemplate: nodeSelectionAdornmentTemplate\n      }, {\n        resizable: true,\n        resizeObjectName: \"PANEL\",\n        resizeAdornmentTemplate: nodeResizeAdornmentTemplate\n      }, {\n        rotatable: true,\n        rotateAdornmentTemplate: nodeRotateAdornmentTemplate\n      }, new go.Binding(\"angle\").makeTwoWay(), // the main object is a Panel that surrounds a TextBlock with a Shape\n      $(go.Panel, \"Auto\", {\n        name: \"PANEL\"\n      }, new go.Binding(\"desiredSize\", \"size\", go.Size.parse).makeTwoWay(go.Size.stringify), $(go.Shape, \"Rectangle\", // default figure\n      {\n        portId: \"\",\n        fromLinkable: true,\n        toLinkable: true,\n        cursor: \"pointer\",\n        fill: \"white\",\n        strokeWidth: 2\n      }, new go.Binding(\"figure\"), new go.Binding(\"fill\")), $(go.TextBlock, {\n        font: \"bold 11pt Helvetica, Arial, sans-serif\",\n        margin: 8,\n        maxSize: new go.Size(160, NaN),\n        wrap: go.TextBlock.WrapFit,\n        editable: true\n      }, new go.Binding(\"text\").makeTwoWay())), {\n        mouseEnter: function (e, node) {\n          showSmallPorts(node, true);\n        },\n        mouseLeave: function (e, node) {\n          showSmallPorts(node, false);\n        }\n      });\n\n      function showSmallPorts(node, show) {\n        node.ports.each(function (port) {\n          if (port.portId !== \"\") {\n            // don't change the default port, which is the big shape\n            port.fill = show ? \"rgba(0,0,0,.3)\" : null;\n          }\n        });\n      }\n\n      var linkSelectionAdornmentTemplate = $(go.Adornment, \"Link\", $(go.Shape, // isPanelMain declares that this Shape shares the Link.geometry\n      {\n        isPanelMain: true,\n        fill: null,\n        stroke: \"deepskyblue\",\n        strokeWidth: 0\n      }) // use selection object's strokeWidth\n      );\n      this.diagram.linkTemplate = $(go.Link, // the whole link panel\n      {\n        selectable: true,\n        selectionAdornmentTemplate: linkSelectionAdornmentTemplate\n      }, {\n        relinkableFrom: true,\n        relinkableTo: true,\n        reshapable: true\n      }, {\n        routing: go.Link.AvoidsNodes,\n        curve: go.Link.JumpOver,\n        corner: 5,\n        toShortLength: 4\n      }, new go.Binding(\"points\").makeTwoWay(), $(go.Shape, // the link path shape\n      {\n        isPanelMain: true,\n        strokeWidth: 2\n      }), $(go.Shape, // the arrowhead\n      {\n        toArrow: \"Standard\",\n        stroke: null\n      }), $(go.Panel, \"Auto\", new go.Binding(\"visible\", \"isSelected\").ofObject(), $(go.Shape, \"RoundedRectangle\", // the link shape\n      {\n        fill: \"#F8F8F8\",\n        stroke: null\n      }), $(go.TextBlock, {\n        textAlign: \"center\",\n        font: \"10pt helvetica, arial, sans-serif\",\n        stroke: \"#919191\",\n        margin: 2,\n        minSize: new go.Size(10, NaN),\n        editable: true\n      }, new go.Binding(\"text\").makeTwoWay())));\n      this.palette = $(go.Palette, \"paletteDiv\", {\n        maxSelectionCount: 1,\n        nodeTemplateMap: this.diagram.nodeTemplateMap,\n        linkTemplate: // simplify the link template, just in this Palette\n        $(go.Link, {\n          // to line up the Link in the same manner we have to pretend the Link has the same location spot\n          locationSpot: go.Spot.Center,\n          selectionAdornmentTemplate: $(go.Adornment, \"Link\", {\n            locationSpot: go.Spot.Center\n          }, $(go.Shape, {\n            isPanelMain: true,\n            fill: null,\n            stroke: \"deepskyblue\",\n            strokeWidth: 0\n          }), $(go.Shape, // the arrowhead\n          {\n            toArrow: \"Standard\",\n            stroke: null\n          }))\n        }, {\n          routing: go.Link.AvoidsNodes,\n          curve: go.Link.JumpOver,\n          corner: 5,\n          toShortLength: 4\n        }, new go.Binding(\"points\"), $(go.Shape, // the link path shape\n        {\n          isPanelMain: true,\n          strokeWidth: 2\n        }), $(go.Shape, // the arrowhead\n        {\n          toArrow: \"Standard\",\n          stroke: null\n        })),\n        model: new go.GraphLinksModel([{\n          text: \"User\",\n          figure: \"Ellipse\",\n          \"size\": \"80 70\",\n          fill: \"#00AD5F\"\n        }, {\n          text: \"API\",\n          figure: \"Actor\",\n          fill: \"#00AD5F\"\n        }, {\n          text: \"Container\",\n          figure: \"Border\",\n          fill: \" #4b6be1 \"\n        }, {\n          text: \"DataBase\",\n          figure: \"Database\",\n          \"size\": \"90 80\",\n          fill: \"#ff9517 \"\n        }, {\n          text: \"Comentario\",\n          figure: \"RoundedRectangle\",\n          \"size\": \"115 50\",\n          fill: \"lightyellow\"\n        }, {\n          text: \"Modelo\",\n          figure: \"Border\",\n          \"size\": \"115 50\",\n          fill: \"lightyellow\"\n        }, {\n          text: \"PRUEB\",\n          figure: \"Border\",\n          \"size\": \"115 50\",\n          fill: \"lightyellow\"\n        }])\n      });\n    }\n\n    save() {\n      this.saveDiagramProperties();\n      console.log(this.diagram.model.toJson());\n      this.diagram.isModified = false;\n    }\n\n    load(diagramData) {\n      //console.log('recargar diagrama');\n      //console.log(this.diagram.model.toJson());\n      this.diagram.model = go.Model.fromJson(diagramData);\n      this.diagram.animationManager.initialAnimationStyle = go.AnimationManager.None;\n      this.loadDiagramProperties();\n    }\n\n    saveDiagramProperties() {\n      this.diagram.model.modelData.position = go.Point.stringify(this.diagram.position);\n    }\n\n    loadDiagramProperties() {\n      var pos = this.diagram.model.modelData.position;\n\n      if (pos) {\n        this.diagram.initialPosition = go.Point.parse(pos);\n      }\n    } //hacemos uso de los sockets para enviar y recibir datos\n\n\n    sendData() {\n      this.diagramServices.sendData(this.diagram.model.toJson()); //console.log(this.save())\n    }\n\n    getData() {\n      this.dataSubscription = this.diagramServices.getData().subscribe(data => {\n        this.load(data);\n      });\n    }\n\n  }\n\n  DiagramComponent.ɵfac = function DiagramComponent_Factory(t) {\n    return new (t || DiagramComponent)(i0.ɵɵdirectiveInject(i1.DiagramService), i0.ɵɵdirectiveInject(i2.ToastrService), i0.ɵɵdirectiveInject(i3.Router));\n  };\n\n  DiagramComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DiagramComponent,\n    selectors: [[\"app-diagram\"]],\n    hostBindings: function DiagramComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function DiagramComponent_click_HostBindingHandler($event) {\n          return ctx.onClick($event);\n        }, false, i0.ɵɵresolveDocument);\n      }\n    },\n    inputs: {\n      model: \"model\"\n    },\n    decls: 6,\n    vars: 0,\n    consts: [[1, \"getDiagrams\"], [\"id\", \"diagramsPanel\"], [\"id\", \"paletteDiv\"], [\"paletteDiv\", \"\"], [\"id\", \"diagramDiv\"], [\"diagramDiv\", \"\"]],\n    template: function DiagramComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelement(2, \"div\", 2, 3);\n        i0.ɵɵelement(4, \"div\", 4, 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"#diagramsPanel[_ngcontent-%COMP%]{width:100%;white-space:nowrap;justify-content:space-between}#diagramDiv[_ngcontent-%COMP%]{border:3px solid black;display:inline-block;vertical-align:top;width:84%;height:550px;background:white}#paletteDiv[_ngcontent-%COMP%]{border:3px solid black;display:inline-block;vertical-align:top;width:13%;height:550px;background:whitesmoke}.buttons[_ngcontent-%COMP%]{display:flex;justify-content:center}.getDiagrams[_ngcontent-%COMP%]{display:grid;grid-template-columns:5fr 1fr}.loadDiagram[_ngcontent-%COMP%]{width:100%;height:500px;background:whitesmoke;border:3px solid black}\"]\n  });\n  return DiagramComponent;\n})();\nexport { DiagramComponent as default };","map":null,"metadata":{},"sourceType":"module"}